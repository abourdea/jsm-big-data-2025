{
  "hash": "185b74c97397e4eede1fab4a0fff2784",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Finding slowdowns and solutions.\"\nformat: \n  revealjs:\n    footer: \"[JSM: Large Data](https://github.com/kbodwin/jsm-big-data-2025/tree/main/materials)\"\n    theme: simple\n    scrollable: true\n    embed-resources: true\neditor: source\nexecute:\n  echo: true\n---\n\n\n\n# \"Local Data\" {background-color=\"#0F4C81\"}\n\n## You have data that...\n\n* You want to analyze: summarize, visualize, model, etc.\n\n* Can be downloaded somewhere on your local machine.\n\n* Can be read fully into R...\n\n. . .\n\n ... but maybe very slowly...\n \n. . . \n\n ... and maybe only if it's a *parquet* file.\n\n\n\n## What if it's bigger than that?\n\n* It's probably in a **cloud database**. (e.g. AWS)\n\n* Do the *individual* files/tables fit on disk?\n\n* Can you query *subsets* of the data and fit those on disk?\n\n\n# Vocab {background-color=\"#0F4C81\"}\n\n## Key Terms\n\n* Data is **on disk** if it is stored on your computer\n\n* Data is **in-memory** if you load it into RAM, e.g. loading into R.\n\n* A **csv** file is a file type for storing data as *comma separated text*.\n\n* A **parquet** file is a file type for storing data as *column information*.\n\n\n\n## Key Packages\n\n* `data.table` optimizes calculations **in R** on data frames, via algorithmic cleverness and **C implementation**.\n\n* `duckdb` creates a **SQL database** locally and lets you use **R Code** to execute **SQL operations**.\n\n* `arrow` provides ways to read and write **parquet files** and to move data around between `data.table`, `duckdb`, and other formats.\n\n## Helper Packages\n\n* Friends of `data.table`:  \n    + `dtplyr`, `tidyfast` for `dplyr` syntax\n    + `mlr3` for machine learning\n\n* Friends of `duckdb`:\n    + `duckplyr` for for `dplyr` syntax\n    + `odbc`,  for connection to cloud databases\n\n* Other speed/efficiency helpers: \n    + `polars` in python\n\n\n\n\n# Possible Slowdowns {background-color=\"#0F4C81\"}\n\n## 1. My data reads in slowly.\n\nA. Use `data.table::fread()` instead.\n\nB. Write it to a *parquet* version; use `arrow::read_parquet()`.\n\nC. Put it in a *duckdb*; use queries to avoid reading the whole dataset at once.\n\n\n## 2. One of my pipelines is a little slow, and I do it many times\n\nA. Are you using *vectorized* functions (or could you)?\n\nB. Use `data.table` - do the small speed gains add up?\n\nC. Can you move some subsetting steps to `duckdb`?\n\n\n## 3. One of my pipelines is very slow.\n\nA. Can you re-order the pipeline?\n\nB. Are you doing a *split-apply-combine* over many groups?  `data.table`!\n\nC. Are you doing a *subsetting* process? `data.table` or `duckdb`!\n\nD. Is it just a lot of data?  `duckdb` and calculate in partitions.\n\n## Setup\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"../data/raw_csvs/person/2021/az/psam_p04.csv\")\n```\n:::\n\n\n\n\n\n# Step 1. Timing Chunks {background-color=\"#0F4C81\"}\n\n\n## The `tictoc()` package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\n\n  dat |>\n    pivot_longer(PWGTP1:PWGTP80,\n               names_to = \"Weight_Num\",\n               values_to = \"Weight_Amount\") |>\n    group_by(ST) |>\n    mutate(\n      max_weight = max(Weight_Amount)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,842,000 × 210\n# Groups:   ST [1]\n   RT    SERIALNO   DIVISION SPORDER PUMA  REGION ST    ADJINC PWGTP  AGEP   CIT\n   <chr> <chr>         <dbl> <chr>   <chr>  <dbl> <chr>  <dbl> <dbl> <dbl> <dbl>\n 1 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 2 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 3 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 4 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 5 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 6 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 7 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 8 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n 9 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n10 P     2021GQ000…        8 01      00800      4 04    1.03e6    35    36     1\n# ℹ 5,841,990 more rows\n# ℹ 199 more variables: CITWP <dbl>, COW <dbl>, DDRS <dbl>, DEAR <dbl>,\n#   DEYE <dbl>, DOUT <dbl>, DPHY <dbl>, DRAT <dbl>, DRATX <dbl>, DREM <dbl>,\n#   ENG <dbl>, FER <dbl>, GCL <dbl>, GCM <dbl>, GCR <dbl>, HIMRKS <dbl>,\n#   HINS1 <dbl>, HINS2 <dbl>, HINS3 <dbl>, HINS4 <dbl>, HINS5 <dbl>,\n#   HINS6 <dbl>, HINS7 <dbl>, INTP <dbl>, JWMNP <dbl>, JWRIP <dbl>,\n#   JWTRNS <chr>, LANX <dbl>, MAR <dbl>, MARHD <dbl>, MARHM <dbl>, …\n```\n\n\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3.124 sec elapsed\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n# Step 2. Profiling Processes {background-color=\"#0F4C81\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis::profvis({\n  dat |>\n    pivot_longer(PWGTP1:PWGTP80,\n               names_to = \"Weight_Num\",\n               values_to = \"Weight_Amount\") |>\n    group_by(ST) |>\n    mutate(\n      max_weight = max(Weight_Amount)\n    )\n}\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"profvis html-widget html-fill-item\" id=\"htmlwidget-8f2340aa392832709130\" style=\"width:100%;height:600px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8f2340aa392832709130\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,111,111,111,111,112,112,112,112,113,113,113,113,114,114,114,114,115,115,115,115,116,116,116,116,117,117,117,117,118,118,118,118,119,119,119,119,120,120,120,120,121,121,121,121,122,122,122,122,123,123,123,123,124,124,124,124,125,125,125,125,126,126,126,126,127,127,127,127,128,128,128,128,129,129,129,129,130,130,130,130,131,131,131,131,132,132,132,132,133,133,133,133,134,134,134,134,135,135,135,136,136,136,137,137,137,138,138,138,139,139,139,140,140,140,141,141,141,142,142,142,143,143,143,144,144,144,144,144,145,145,145,145,145,146,146],\"depth\":[4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1],\"label\":[\"list_unchop\",\"vec_interleave\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"<GC>\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep_each\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_rep\",\"pivot_longer_spec\",\"pivot_longer.data.frame\",\"vec_locate_sorted_groups\",\"dplyr_locate_sorted_groups\",\"compute_groups\",\"grouped_df\",\"group_by.data.frame\",\"vec_locate_sorted_groups\",\"dplyr_locate_sorted_groups\",\"compute_groups\",\"grouped_df\",\"group_by.data.frame\",\"<Anonymous>\",\".main\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[243.2679901123047,243.2679901123047,243.2679901123047,243.2679901123047,310.1871109008789,310.1871109008789,310.1871109008789,310.1871109008789,310.1871109008789,310.1871109008789,354.7580642700195,354.7580642700195,354.7580642700195,399.3290176391602,399.3290176391602,399.3290176391602,443.8999710083008,443.8999710083008,443.8999710083008,488.4709243774414,488.4709243774414,488.4709243774414,533.041877746582,533.041877746582,533.041877746582,577.6128311157227,577.6128311157227,577.6128311157227,622.1837844848633,622.1837844848633,622.1837844848633,755.8966445922852,755.8966445922852,755.8966445922852,889.609504699707,889.609504699707,889.609504699707,1023.322364807129,1023.322364807129,1023.322364807129,1157.035224914551,1157.035224914551,1157.035224914551,1290.748085021973,1290.748085021973,1290.748085021973,1469.031898498535,1469.031898498535,1469.031898498535,1602.744758605957,1602.744758605957,1602.744758605957,1736.457618713379,1736.457618713379,1736.457618713379,1870.170478820801,1870.170478820801,1870.170478820801,1959.312385559082,1959.312385559082,1959.312385559082,2003.883338928223,2003.883338928223,2003.883338928223,2137.596199035645,2137.596199035645,2137.596199035645,2271.309059143066,2271.309059143066,2271.309059143066,2405.021919250488,2405.021919250488,2405.021919250488,2538.73477935791,2538.73477935791,2538.73477935791,2627.876686096191,2627.876686096191,2627.876686096191,2761.589546203613,2761.589546203613,2761.589546203613,2895.302406311035,2895.302406311035,2895.302406311035,3029.015266418457,3029.015266418457,3029.015266418457,3118.157173156738,3118.157173156738,3118.157173156738,3162.728126525879,3162.728126525879,3162.728126525879,3162.728126525879,3162.728126525879,3162.728126525879,3207.29907989502,3207.29907989502,3207.29907989502,3207.29907989502,3207.29907989502,3207.29907989502,3251.87003326416,3251.87003326416,3251.87003326416,3251.87003326416,3251.87003326416,3251.87003326416,3296.440986633301,3296.440986633301,3296.440986633301,3385.582893371582,3385.582893371582,3385.582893371582,3474.724800109863,3474.724800109863,3474.724800109863,3563.866706848145,3563.866706848145,3563.866706848145,3653.008613586426,3653.008613586426,3653.008613586426,3786.721473693848,3786.721473693848,3786.721473693848,3786.721473693848,3786.721473693848,3786.721473693848,3831.292427062988,3831.292427062988,3831.292427062988,3831.292427062988,3831.292427062988,3831.292427062988,3965.00528717041,3965.00528717041,3965.00528717041,4054.147193908691,4054.147193908691,4054.147193908691,4187.860054016113,4187.860054016113,4187.860054016113,4232.431007385254,4232.431007385254,4232.431007385254,4232.431007385254,4232.431007385254,4232.431007385254,4277.001960754395,4277.001960754395,4277.001960754395,4321.572914123535,4321.572914123535,4321.572914123535,4321.572914123535,4321.572914123535,4321.572914123535,4366.143867492676,4366.143867492676,4366.143867492676,4366.143867492676,4366.143867492676,4366.143867492676,4455.285774230957,4455.285774230957,4455.285774230957,4499.856727600098,4499.856727600098,4499.856727600098,4499.856727600098,4499.856727600098,4499.856727600098,4588.998634338379,4588.998634338379,4588.998634338379,4588.998634338379,4588.998634338379,4588.998634338379,4633.56958770752,4633.56958770752,4633.56958770752,4722.711494445801,4722.711494445801,4722.711494445801,4767.282447814941,4767.282447814941,4767.282447814941,4811.853401184082,4811.853401184082,4811.853401184082,4900.995307922363,4900.995307922363,4900.995307922363,4945.566261291504,4945.566261291504,4945.566261291504,4990.137214660645,4990.137214660645,4990.137214660645,5034.708168029785,5034.708168029785,5034.708168029785,5034.708168029785,5034.708168029785,5034.708168029785,5079.279121398926,5079.279121398926,5079.279121398926,5123.850074768066,5123.850074768066,5123.850074768066,5257.562934875488,5257.562934875488,5257.562934875488,5302.133888244629,5302.133888244629,5302.133888244629,5346.70484161377,5346.70484161377,5346.70484161377,5346.70484161377,5346.70484161377,5346.70484161377,5435.846748352051,5435.846748352051,5435.846748352051,5569.559608459473,5569.559608459473,5569.559608459473,5658.701515197754,5658.701515197754,5658.701515197754,5747.843421936035,5747.843421936035,5747.843421936035,5881.556282043457,5881.556282043457,5881.556282043457,5970.698188781738,5970.698188781738,5970.698188781738,5970.698188781738,5970.698188781738,5970.698188781738,6015.269142150879,6015.269142150879,6015.269142150879,6015.269142150879,6015.269142150879,6015.269142150879,6148.982002258301,6148.982002258301,6148.982002258301,6238.123908996582,6238.123908996582,6238.123908996582,6371.836769104004,6371.836769104004,6371.836769104004,6460.978675842285,6460.978675842285,6460.978675842285,6594.691535949707,6594.691535949707,6594.691535949707,6683.833442687988,6683.833442687988,6683.833442687988,6772.97534942627,6772.97534942627,6772.97534942627,6862.117256164551,6862.117256164551,6862.117256164551,6951.259162902832,6951.259162902832,6951.259162902832,7084.972023010254,7084.972023010254,7084.972023010254,7174.113929748535,7174.113929748535,7174.113929748535,7307.826789855957,7307.826789855957,7307.826789855957,7396.968696594238,7396.968696594238,7396.968696594238,7486.11060333252,7486.11060333252,7486.11060333252,7619.823463439941,7619.823463439941,7619.823463439941,7753.536323547363,7753.536323547363,7753.536323547363,7842.678230285645,7842.678230285645,7842.678230285645,7976.391090393066,7976.391090393066,7976.391090393066,8065.532997131348,8065.532997131348,8065.532997131348,8199.24585723877,8199.24585723877,8199.24585723877,8288.387763977051,8288.387763977051,8288.387763977051,8377.529670715332,8377.529670715332,8377.529670715332,8511.242530822754,8511.242530822754,8511.242530822754,8600.384437561035,8600.384437561035,8600.384437561035,8689.526344299316,8689.526344299316,8689.526344299316,8778.668251037598,8778.668251037598,8778.668251037598,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8778.668281555176,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.425231933594,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8800.421081542969,8844.991661071777,8844.991661071777,8844.991661071777,8934.133567810059,8934.133567810059,8934.133567810059,8978.704521179199,8978.704521179199,8978.704521179199,9067.84642791748,9067.84642791748,9067.84642791748,9156.988334655762,9156.988334655762,9156.988334655762,9290.701194763184,9290.701194763184,9290.701194763184,9424.414054870605,9424.414054870605,9424.414054870605,9535.841522216797,9535.841522216797,9535.841522216797,9535.841522216797,9535.841522216797,9535.841522216797,9535.926658630371,9535.926658630371,9535.926658630371,9535.926658630371,9535.926658630371,9580.879867553711,9580.879867553711,9580.879867553711,9580.879867553711,9580.879867553711,9625.486724853516,9625.486724853516],\"meminc\":[0,0,0,0,66.91912078857422,0,0,0,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,178.2838134765625,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,89.14190673828125,0,0,44.57095336914062,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,133.7128601074219,0,0,133.7128601074219,0,0,89.14190673828125,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,89.14190673828125,0,0,89.14190673828125,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,0,0,0,44.57095336914062,0,0,0,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,0,0,0,89.14190673828125,0,0,44.57095336914062,0,0,0,0,0,89.14190673828125,0,0,0,0,0,44.57095336914062,0,0,89.14190673828125,0,0,44.57095336914062,0,0,44.57095336914062,0,0,89.14190673828125,0,0,44.57095336914062,0,0,44.57095336914062,0,0,44.57095336914062,0,0,0,0,0,44.57095336914062,0,0,44.57095336914062,0,0,133.7128601074219,0,0,44.57095336914062,0,0,44.57095336914062,0,0,0,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,0,0,0,44.57095336914062,0,0,0,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,89.14190673828125,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,89.14190673828125,0,0,89.14190673828125,0,0,89.14190673828125,0,0,3.0517578125e-05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21.75695037841797,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.004150390625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44.57057952880859,0,0,89.14190673828125,0,0,44.57095336914062,0,0,89.14190673828125,0,0,89.14190673828125,0,0,133.7128601074219,0,0,133.7128601074219,0,0,111.4274673461914,0,0,0,0,0,0.08513641357421875,0,0,0,0,44.95320892333984,0,0,0,0,44.60685729980469,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/var/folders/st/pw77hjgj43v89ypp8n67vdb00000gn/T//RtmpZb7D1o/file91dd72a0248b.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n# Step 3. Benchmarking Solutions {background-color=\"#0F4C81\"}\n\n## Function wrappers (optional)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_pipeline <-  function() {\n  dat |>\n    pivot_longer(PWGTP1:PWGTP80,\n               names_to = \"Weight_Num\",\n               values_to = \"Weight_Amount\") |>\n    group_by(CIT) |>\n    mutate(\n      max_weight = max(Weight_Amount)\n    )\n}\n\nlibrary(dtplyr)\n\nnew_pipeline <- function() {\n  dat |>\n    rowwise() |>\n    summarize(\n      max_weight = max(PWGTP1:PWGTP80),\n      CIT = CIT\n    ) |>\n    group_by(CIT) |>\n    summarize(\n      max_weight = max(max_weight)\n    )\n}\n```\n:::\n\n\n\n## Microbenchmark for multiple runs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark::microbenchmark(\n  old_version = old_pipeline(),\n  new_version = new_pipeline(),\n  times = 5\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n        expr       min        lq      mean    median        uq       max neval\n old_version 1612.0746 1673.3494 1820.7446 1823.9169 1984.6106 2009.7713     5\n new_version  191.5454  250.3799  329.5858  387.5821  408.1263  410.2953     5\n```\n\n\n:::\n:::\n\n\n\n## `bench` package for memory comparisons...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::mark(\n  old_version = old_pipeline(),\n  new_version = new_pipeline(),\n  check = FALSE,\n  max_iterations = 3\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  expression       min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 old_version    2.09s    2.09s     0.478    9.45GB    0.956\n2 new_version 191.34ms  199.4ms     4.51    15.24MB   28.6  \n```\n\n\n:::\n:::\n\n\n\n## ... and testing scaling with size\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- bench::press(\n  duplications = c(1, 2),\n  {\n    dat_big <- bind_rows(replicate(duplications, dat, simplify = FALSE))\n    bench::mark(\n      old_version = old_pipeline(),\n      new_version = new_pipeline(),\n      check = FALSE,\n      max_iterations = 3\n    )\n  }\n)\n\nresults\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 7\n  expression  duplications      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>         <dbl> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 old_version            1    2.04s    2.04s     0.490    9.45GB    0.490\n2 new_version            1 194.53ms  251.4ms     3.47    15.24MB   20.8  \n3 old_version            2    1.96s    1.96s     0.509    9.45GB    1.02 \n4 new_version            2 248.67ms 262.87ms     3.80    15.24MB   20.9  \n```\n\n\n:::\n:::\n\n\n\n\n## Summary\n\n1. Use `tictoc()` or `proc.time()` to get a feel for runtimes of larger chunks.\n\n2. Use profiling to narrow down where in a chunk the slowdowns are.\n\n3. Use benchmarking to compare your old version to a proposed solution.\n\n4. Use benchmark testing to see how your speed ups scale with data size.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.7.1/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-11.10.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-11.10.0/highlight.min.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.4.0/profvis.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}