{
  "hash": "c92bfb5fcb1ade6033ada92f0b632d6f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Find the slowdowns\"\neditor: source\n---\n\n\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(tictoc)\n```\n:::\n\n\n\n\n\n## Your Turn\n\nWe will find the slowdowns in the following process:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- c(\"ak\", \"al\", \"ar\", \"az\", \"wa\", \"wi\", \"wv\", \"wy\")\n\ndat <- data.frame()\n\nfor (state in states) {\n  my_files <- list.files(glue(\"../data/raw_csvs/person/2021/{state}/\"), full.names = TRUE)\n  \n  for (file in my_files) {\n    \n    temp <- read_csv(file) |>\n      mutate_all(as.character)\n    \n    dat <- dat |>\n      bind_rows(temp)\n    \n  }\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 6411 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (25): RT, SERIALNO, SPORDER, PUMA, ST, JWTRNS, SCHG, SCHL, ANC1P, ANC2P...\ndbl (262): DIVISION, REGION, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS, DEA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 49647 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (25): RT, SERIALNO, SPORDER, PUMA, ST, JWTRNS, SCHG, SCHL, ANC1P, ANC2P...\ndbl (262): DIVISION, REGION, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS, DEA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 30050 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (25): RT, SERIALNO, SPORDER, PUMA, ST, JWTRNS, SCHG, SCHL, ANC1P, ANC2P...\ndbl (262): DIVISION, REGION, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS, DEA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 73025 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (25): RT, SERIALNO, SPORDER, PUMA, ST, JWTRNS, SCHG, SCHL, ANC1P, ANC2P...\ndbl (262): DIVISION, REGION, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS, DEA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 78528 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (23): RT, SERIALNO, SPORDER, JWTRNS, SCHG, SCHL, ANC1P, ANC2P, HISP, IN...\ndbl (264): DIVISION, PUMA, REGION, ST, ADJINC, PWGTP, AGEP, CIT, CITWP, COW,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 60281 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (24): RT, SERIALNO, SPORDER, PUMA, JWTRNS, SCHG, SCHL, ANC1P, ANC2P, HI...\ndbl (263): DIVISION, REGION, ST, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 17428 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (24): RT, SERIALNO, SPORDER, PUMA, JWTRNS, SCHG, SCHL, ANC1P, ANC2P, HI...\ndbl (263): DIVISION, REGION, ST, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 5861 Columns: 287\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (24): RT, SERIALNO, SPORDER, PUMA, JWTRNS, SCHG, SCHL, ANC1P, ANC2P, HI...\ndbl (263): DIVISION, REGION, ST, ADJINC, PWGTP, AGEP, CIT, CITWP, COW, DDRS,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |>\n  mutate(\n    age_groups = case_when(\n      AGEP < 18 ~ \"Under 18\",\n      AGEP < 65 ~ \"18-64\",\n      TRUE ~ \"65+\"\n    )\n  ) |>\n  group_by(REGION, CIT, SEX, ST, age_groups) |>\n  summarize(\n    count = n()\n  ) |>\n  pivot_wider(names_from = age_groups,\n              values_from = count) |>\n  filter(REGION == 3) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'REGION', 'CIT', 'SEX', 'ST'. You can\noverride using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"REGION\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"CIT\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"SEX\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ST\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"18-64\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"65+\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Under 18\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"1\",\"3\":\"1\",\"4\":\"01\",\"5\":\"14434\",\"6\":\"5707\",\"7\":\"2725\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"1\",\"4\":\"05\",\"5\":\"8552\",\"6\":\"3551\",\"7\":\"1779\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"1\",\"4\":\"54\",\"5\":\"5123\",\"6\":\"2312\",\"7\":\"954\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"2\",\"4\":\"01\",\"5\":\"15006\",\"6\":\"7099\",\"7\":\"2626\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"2\",\"4\":\"05\",\"5\":\"8892\",\"6\":\"4088\",\"7\":\"1738\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"2\",\"4\":\"54\",\"5\":\"5104\",\"6\":\"2680\",\"7\":\"853\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"4\":\"01\",\"5\":\"34\",\"6\":\"4\",\"7\":\"3\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"4\":\"05\",\"5\":\"12\",\"6\":\"3\",\"7\":\"1\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"4\":\"54\",\"5\":\"13\",\"6\":\"3\",\"7\":\"NA\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"2\",\"4\":\"01\",\"5\":\"18\",\"6\":\"11\",\"7\":\"5\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"2\",\"4\":\"05\",\"5\":\"4\",\"6\":\"5\",\"7\":\"NA\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"2\",\"4\":\"54\",\"5\":\"5\",\"6\":\"2\",\"7\":\"1\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"4\":\"01\",\"5\":\"128\",\"6\":\"22\",\"7\":\"11\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"4\":\"05\",\"5\":\"67\",\"6\":\"17\",\"7\":\"8\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"4\":\"54\",\"5\":\"33\",\"6\":\"8\",\"7\":\"7\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"2\",\"4\":\"01\",\"5\":\"142\",\"6\":\"35\",\"7\":\"15\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"2\",\"4\":\"05\",\"5\":\"69\",\"6\":\"18\",\"7\":\"5\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"2\",\"4\":\"54\",\"5\":\"26\",\"6\":\"8\",\"7\":\"3\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"1\",\"4\":\"01\",\"5\":\"244\",\"6\":\"83\",\"7\":\"9\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"1\",\"4\":\"05\",\"5\":\"180\",\"6\":\"41\",\"7\":\"4\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"1\",\"4\":\"54\",\"5\":\"40\",\"6\":\"27\",\"7\":\"1\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"2\",\"4\":\"01\",\"5\":\"270\",\"6\":\"103\",\"7\":\"14\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"2\",\"4\":\"05\",\"5\":\"187\",\"6\":\"65\",\"7\":\"6\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"2\",\"4\":\"54\",\"5\":\"55\",\"6\":\"33\",\"7\":\"2\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"1\",\"4\":\"01\",\"5\":\"430\",\"6\":\"30\",\"7\":\"27\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"1\",\"4\":\"05\",\"5\":\"330\",\"6\":\"25\",\"7\":\"24\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"1\",\"4\":\"54\",\"5\":\"64\",\"6\":\"9\",\"7\":\"1\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"2\",\"4\":\"01\",\"5\":\"341\",\"6\":\"40\",\"7\":\"31\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"2\",\"4\":\"05\",\"5\":\"323\",\"6\":\"37\",\"7\":\"19\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"2\",\"4\":\"54\",\"5\":\"48\",\"6\":\"9\",\"7\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### Step One: Find the problem chunk(s)\n\nUse `tictoc()` to figure out which of the two steps is slowest.\n\nUse `system.time()` to figure out which part of the data read is slowest.\n\n### Step Two: Profile the processes\n\nUse `profviz()` to see where the slowdowns occur in the analysis pipeline.\n\n### Step Three: Benchmark a solution\n\nTry rearranging your analysis pipeline to be more efficient.  Compare this solution to the original.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}