{
  "hash": "2dc9f3a2725384a4125da601bac375a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`data.table`\"\nsubtitle: \"Activity\"\nformat: \n  revealjs:\n    footer: \"[JSM: Large Data](https://github.com/kbodwin/jsm-large-data)\"\n    theme: simple\n    scrollable: true\n    embed-resources: true\neditor: source\nexecute:\n  message: false\n  warning: false\n  echo: true\n---\n\n\n\n\n\n## Setup\n\nDownload [zip file](https://github.com/arrowrbook/book/releases/download/PUMS_subset/PUMS.subset.zip)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(arrow)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load PUMS data (same as in slides)\npums <- open_dataset(here::here(\"data\", \"PUMS\", \"person\")) |> collect()\nsetDT(pums)\n\n# Add age groups variable for exercises\npums[, age_groups := fcase(AGEP < 18, \"Under 18\", AGEP < 65, \"18-64\", default = \"65+\")]\n```\n:::\n\n\n\n\n## Demo\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select columns (j)\npums[, .(AGEP, SEX, ST)]\n\n# Filter rows (i)\npums[year == 2021 & location == \"ak\"]\n\n# Summarize by groups (by)\npums[, .(total_pop = sum(PWGTP)), by = ST]\n\n# Add new columns with :=\npums[, total_pop := sum(PWGTP), by = ST]\npums[, age_decade := floor(AGEP / 10) * 10]\n\n# Chain operations\npums[year == 2021][, .(avg_age = mean(AGEP)), by = ST][order(-avg_age)]\n```\n:::\n\n\n\n\n## Your Turn\n\nTry these exercises with the PUMS dataset:\n\n1. **Find the unique values of the `ST` variable**: use `data.table` syntax or `dtplyr` syntax to find the unique values of the `ST` variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n2. **Basic filtering and grouping**: Calculate total population by `age_groups` for both Alaska and California across years.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n3. **Population comparison**: Compare total population across all states for 2021\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n4. **Income analysis**: Find the median personal income (`PINCP`) by age group across all years.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n5. **Chaining operations**: Find the state with the highest average age in 2022, sorted from oldest to youngest\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n6. **Creating new variables**: Add a variable for income brackets (`PINCP`) and calculate employment rates (`ESR`) by bracket\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hint: Use PINCP for income, ESR for employment status\n# Your code here\n```\n:::\n\n\n\n\n## Your Turn\n\n7. **Rolling Joins (extra challenging)**: Using the variables produced in number 6, join with the following data using the roll parameter to create a new variable called `col_adjustment`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_adjustments <- data.table(\n  state_code = c(1, 2, 3, 4, 5, 6, 7, 8, 9),  # WV, WI, AL, AZ, AR, WY, WA, CA, AK\n  state_name = c(\n    \"West Virginia\", \"Wisconsin\", \"Alabama\", \"Arizona\", \"Arkansas\", \n    \"Wyoming\", \"Washington\", \"California\", \"Alaska\"),\n  col_factor = c(0.82, 0.88, 0.85, 0.92, 0.83, 0.89, 1.08, 1.25, 1.15)\n)\nsetkey(col_adjustments, state_code)\n\n# Hint try both roll = -Inf and roll = +Inf and see which one makes sense for this scenario\n# Your code here\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}